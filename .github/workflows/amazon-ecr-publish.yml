---
on:
  push:
    branches:
      - main
  workflow_dispatch:
name: CI to Amazon ECR and AWS Batch
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install jq
        shell: bash -euox pipefail {0}
        run: |
          sudo apt-get -y update
          sudo apt-get -y install --no-install-recommends --no-install-suggests jq
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-amazon-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push images to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-amazon-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        shell: bash -euox pipefail {0}
        run: |
          for i in $(ls ./build); do
            aws ecr describe-repositories --repository-names "${i}" \
              || aws ecr create-repository --repository-name "${i}"
            docker-compose build "${i}" \
              && docker image tag "${{ github.repository_owner }}/${i}:latest" "${ECR_REGISTRY}/${i}:latest" \
              && docker image tag "${ECR_REGISTRY}/${i}:latest" "${ECR_REGISTRY}/${i}:${IMAGE_TAG}" \
              && docker image push "${ECR_REGISTRY}/${i}:latest" \
              && docker image push "${ECR_REGISTRY}/${i}:${IMAGE_TAG}"
            echo "::set-output name=image::${ECR_REGISTRY}/${i}:${IMAGE_TAG}"
          done
      - name: Register job definitions for AWS Batch
        env:
          ECR_REGISTRY: ${{ steps.login-amazon-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          BATCH_JOB_ROLE_ARN: ${{ secrets.BATCH_JOB_ROLE_ARN }}
          BATCH_EXECUTION_ROLE_ARN: ${{ secrets.BATCH_EXECUTION_ROLE_ARN }}
        shell: bash -euox pipefail {0}
        run: |
          for i in $(ls ./build); do
            for p in 'ec2' 'fargate'; do
              cat template/${p}.job-definition.j2.json \
                | jq ".jobDefinitionName=\"${p}-${i}\"" \
                | jq ".containerProperties.image=\"${ECR_REGISTRY}/${i}:${IMAGE_TAG}\"" \
                | jq ".containerProperties.jobRoleArn=\"${BATCH_JOB_ROLE_ARN}\"" \
                | jq ".containerProperties.executionRoleArn=\"${BATCH_EXECUTION_ROLE_ARN}\"" \
                | tee "${i}.${p}.job-definition.json"
              aws batch register-job-definition --cli-input-json "file://${i}.${p}.job-definition.json"
              aws batch describe-job-definitions --job-definition-name "${p}-${i}" \
                | jq '.jobDefinitions[] | select(.status == "ACTIVE").revision' \
                | sed -e '1d' \
                | xargs -t -I{} aws batch deregister-job-definition --job-definition "${p}-${i}:{}"
            done
          done
