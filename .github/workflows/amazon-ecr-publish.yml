---
# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

on:
  push:
    branches:
      - main
  workflow_dispatch:
name: CI to Amazon ECR
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    # environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install jq
        run: |
          sudo apt-get -y update
          sudo apt-get -y install --no-install-recommends --no-install-suggests jq
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-amazon-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push images to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-amazon-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          for i in $(ls ./build); do
            aws ecr describe-repositories --repository-names "${i}" \
              || aws ecr create-repository --repository-name "${i}"
            docker-compose build "${i}" \
              && docker image tag "${{ github.repository_owner }}/${i}:latest" "${ECR_REGISTRY}/${i}:latest" \
              && docker image tag "${ECR_REGISTRY}/${i}:latest" "${ECR_REGISTRY}/${i}:${IMAGE_TAG}" \
              && docker image push "${ECR_REGISTRY}/${i}:latest" \
              && docker image push "${ECR_REGISTRY}/${i}:${IMAGE_TAG}"
            echo "::set-output name=image::${ECR_REGISTRY}/${i}:${IMAGE_TAG}"
          done
      - name: Create
        env:
          ECR_REGISTRY: ${{ steps.login-amazon-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          JOB_ROLE_ARN: ${{ secrets.JOB_ROLE_ARN }}
          EXECUTION_ROLE_ARN: ${{ secrets.EXECUTION_ROLE_ARN }}
        run: |
          for i in $(ls ./build); do
            for p in 'ec2' 'fargate'; do
              cat template/${p}.job-definition.json \
                | jq ".jobDefinitionName=\"${p}-${i}\"" \
                | jq ".containerProperties.image=\"${ECR_REGISTRY}/${i}:${IMAGE_TAG}\"" \
                | jq ".containerProperties.jobRoleArn=\"${JOB_ROLE_ARN}\"" \
                | jq ".containerProperties.executionRoleArn=\"${EXECUTION_ROLE_ARN}\"" \
                | tee "${i}.${p}.job-definition.json"
              aws batch register-job-definition --cli-input-json "file://${i}.${p}.job-definition.json"
            done
          done
#     - name: Fill in the new image ID in the Amazon ECS task definition
#       id: task-def
#       uses: aws-actions/amazon-ecs-render-task-definition@v1
#       with:
#         task-definition: task-definition.json
#       container-name: sample-app
#       image: ${{ steps.build-image.outputs.image }}
#     - name: Deploy Amazon ECS task definition
#       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#       with:
#         task-definition: ${{ steps.task-def.outputs.task-definition }}
#         service: sample-app-service
#         cluster: default
#         wait-for-service-stability: true
